# version: '3.7'

services:
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    hostname: namenode
    environment:
      - CLUSTER_NAME=iot-cluster
      - HDFS_NAMENODE_USER=root
      - HDFS_DATANODE_USER=root
      - HDFS_SECONDARYNAMENODE_USER=root
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - CORE_CONF_hadoop_http_staticuser_user=root
      - CORE_CONF_hadoop_proxyuser_hue_hosts=*
      - CORE_CONF_hadoop_proxyuser_hue_groups=*
      - HDFS_CONF_dfs_webhdfs_enabled=true
      - HDFS_CONF_dfs_permissions_enabled=false
      - HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check=false
      - JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre
    volumes:
      - ./hadoop/namenode:/hadoop/dfs/name
      - ./data:/data
      - ./config/hadoop-env.sh:/usr/local/hadoop/etc/hadoop/hadoop-env.sh
    ports:
      - "9870:9870"
      - "9000:9000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9870"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    networks:
     - iot-network

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    hostname: datanode
    depends_on:
      - namenode
    dns:
      - 8.8.8.8
    networks:
      - iot-network
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - CORE_CONF_hadoop_http_staticuser_user=root
      - CORE_CONF_hadoop_proxyuser_hue_hosts=*
      - CORE_CONF_hadoop_proxyuser_hue_groups=*
      - HDFS_CONF_dfs_webhdfs_enabled=true
      - HDFS_CONF_dfs_permissions_enabled=false
      - HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check=false
      - SERVICE_PRECONDITION=namenode:9000
      - HDFS_NAMENODE_USER=root
      - HDFS_DATANODE_USER=root
      - HDFS_SECONDARYNAMENODE_USER=root
      - JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre
    volumes:
      - ./hadoop/datanode:/hadoop/dfs/data
      - ./config/hadoop-env.sh:/usr/local/hadoop/etc/hadoop/hadoop-env.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9864"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 1G

  spark-master:
    image: bitnami/spark:3.5.0
    container_name: spark-master
    hostname: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./code/batch:/app/code/batch
      - ./data:/app/data
      - ./config/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    ports:
      - "8080:8080"
      - "7077:7077"
    depends_on:
      - namenode
      - datanode
      - mongodb
      - redis
    dns:
      - 8.8.8.8
    networks:
      - iot-network
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: spark-worker
    hostname: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=4G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./code/batch:/app/code/batch
      - ./data:/app/data
      - ./config/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./spark-tmp:/opt/bitnami/spark/tmp
    depends_on:
      - spark-master
    networks:
      - iot-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 1.5G

  zookeeper:
    image: bitnami/zookeeper:3.8.3
    container_name: zookeeper
    hostname: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - iot-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  kafka:
    image: bitnami/kafka:3.6.0
    container_name: kafka
    hostname: kafka
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - ./code/streaming:/app/streaming
      - ./config/kafka-server.properties:/opt/bitnami/kafka/config/kafka-server.properties
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - iot-network
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 1G

  flask:
    build: ./code/serving
    container_name: flask
    hostname: flask
    restart: on-failure:5
    volumes:
      - ./code/serving:/app
      - ./data:/app/data
    ports:
      - "5000:5000"
    depends_on:
      - spark-master
      - kafka
    networks:
      - iot-network
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - SQLITE_DB_PATH=/app/data/energy_forecasting.db
      - PYTHONUNBUFFERED=1
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    command: gunicorn --timeout 300 --bind 0.0.0.0:5000 app:app

  mongodb:
    image: mongo:latest
    container_name: mongodb
    hostname: mongodb
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - iot-network

  redis:
    image: redis:latest
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    networks:
      - iot-network

networks:
  iot-network:
    driver: bridge